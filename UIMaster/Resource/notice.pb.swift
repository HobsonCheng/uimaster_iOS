//// DO NOT EDIT.
////
//// Generated by the Swift generator plugin for the protocol buffer compiler.
//// Source: notice.proto
////
//// For information on using the generated types, please see the documenation:
////   https://github.com/apple/swift-protobuf/
//
//import Foundation
//import SwiftProtobuf
//
//// If the compiler emits an error on this type, it is because this file
//// was generated by a version of the `protoc` Swift plug-in that is
//// incompatible with the version of SwiftProtobuf to which you are linking.
//// Please ensure that your are building against the same version of the API
//// that was used to generate this file.
//private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
//  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
//  typealias Version = _2
//}
//
//enum ProtosBody_notice_funtion: SwiftProtobuf.Enum {
//  typealias RawValue = Int
//  case cregister // = 1
//  case sregister // = 2
//  case snotice // = 3
//  case cnotice // = 4
//  case scancel // = 5
//  case ccancel // = 6
//
//  init() {
//    self = .cregister
//  }
//
//  init?(rawValue: Int) {
//    switch rawValue {
//    case 1: self = .cregister
//    case 2: self = .sregister
//    case 3: self = .snotice
//    case 4: self = .cnotice
//    case 5: self = .scancel
//    case 6: self = .ccancel
//    default: return nil
//    }
//  }
//
//  var rawValue: Int {
//    switch self {
//    case .cregister: return 1
//    case .sregister: return 2
//    case .snotice: return 3
//    case .cnotice: return 4
//    case .scancel: return 5
//    case .ccancel: return 6
//    }
//  }
//
//}
//
//struct ProtosBody_user_notice: SwiftProtobuf.Message {
//  static let protoMessageName: String = _protobuf_package + ".user_notice"
//
//  var id: Int32 {
//    get {return _id ?? 0}
//    set {_id = newValue}
//  }
//  /// Returns true if `id` has been explicitly set.
//  var hasID: Bool {return self._id != nil}
//  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  mutating func clearID() {self._id = nil}
//
//  var pid: Int32 {
//    get {return _pid ?? 0}
//    set {_pid = newValue}
//  }
//  /// Returns true if `pid` has been explicitly set.
//  var hasPid: Bool {return self._pid != nil}
//  /// Clears the value of `pid`. Subsequent reads from it will return its default value.
//  mutating func clearPid() {self._pid = nil}
//
//  var uid: Int32 {
//    get {return _uid ?? 0}
//    set {_uid = newValue}
//  }
//  /// Returns true if `uid` has been explicitly set.
//  var hasUid: Bool {return self._uid != nil}
//  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
//  mutating func clearUid() {self._uid = nil}
//
//  var notifyID: Int32 {
//    get {return _notifyID ?? 0}
//    set {_notifyID = newValue}
//  }
//  /// Returns true if `notifyID` has been explicitly set.
//  var hasNotifyID: Bool {return self._notifyID != nil}
//  /// Clears the value of `notifyID`. Subsequent reads from it will return its default value.
//  mutating func clearNotifyID() {self._notifyID = nil}
//
//  var targetGroup: Int32 {
//    get {return _targetGroup ?? 0}
//    set {_targetGroup = newValue}
//  }
//  /// Returns true if `targetGroup` has been explicitly set.
//  var hasTargetGroup: Bool {return self._targetGroup != nil}
//  /// Clears the value of `targetGroup`. Subsequent reads from it will return its default value.
//  mutating func clearTargetGroup() {self._targetGroup = nil}
//
//  var target: Int32 {
//    get {return _target ?? 0}
//    set {_target = newValue}
//  }
//  /// Returns true if `target` has been explicitly set.
//  var hasTarget: Bool {return self._target != nil}
//  /// Clears the value of `target`. Subsequent reads from it will return its default value.
//  mutating func clearTarget() {self._target = nil}
//
//  var targetType: Int32 {
//    get {return _targetType ?? 0}
//    set {_targetType = newValue}
//  }
//  /// Returns true if `targetType` has been explicitly set.
//  var hasTargetType: Bool {return self._targetType != nil}
//  /// Clears the value of `targetType`. Subsequent reads from it will return its default value.
//  mutating func clearTargetType() {self._targetType = nil}
//
//  var read: Bool {
//    get {return _read ?? false}
//    set {_read = newValue}
//  }
//  /// Returns true if `read` has been explicitly set.
//  var hasRead: Bool {return self._read != nil}
//  /// Clears the value of `read`. Subsequent reads from it will return its default value.
//  mutating func clearRead() {self._read = nil}
//
//  var content: String {
//    get {return _content ?? String()}
//    set {_content = newValue}
//  }
//  /// Returns true if `content` has been explicitly set.
//  var hasContent: Bool {return self._content != nil}
//  /// Clears the value of `content`. Subsequent reads from it will return its default value.
//  mutating func clearContent() {self._content = nil}
//
//  var addTime: String {
//    get {return _addTime ?? String()}
//    set {_addTime = newValue}
//  }
//  /// Returns true if `addTime` has been explicitly set.
//  var hasAddTime: Bool {return self._addTime != nil}
//  /// Clears the value of `addTime`. Subsequent reads from it will return its default value.
//  mutating func clearAddTime() {self._addTime = nil}
//
//  var unknownFields = SwiftProtobuf.UnknownStorage()
//
//  init() {}
//
//  public var isInitialized: Bool {
//    if self._id == nil {return false}
//    if self._pid == nil {return false}
//    if self._uid == nil {return false}
//    if self._notifyID == nil {return false}
//    if self._targetGroup == nil {return false}
//    if self._target == nil {return false}
//    if self._targetType == nil {return false}
//    if self._read == nil {return false}
//    if self._content == nil {return false}
//    if self._addTime == nil {return false}
//    return true
//  }
//
//  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
//  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
//  /// initializers are defined in the SwiftProtobuf library. See the Message and
//  /// Message+*Additions` files.
//  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._id)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._pid)
//      case 3: try decoder.decodeSingularInt32Field(value: &self._uid)
//      case 4: try decoder.decodeSingularInt32Field(value: &self._notifyID)
//      case 5: try decoder.decodeSingularInt32Field(value: &self._targetGroup)
//      case 6: try decoder.decodeSingularInt32Field(value: &self._target)
//      case 7: try decoder.decodeSingularInt32Field(value: &self._targetType)
//      case 8: try decoder.decodeSingularBoolField(value: &self._read)
//      case 9: try decoder.decodeSingularStringField(value: &self._content)
//      case 10: try decoder.decodeSingularStringField(value: &self._addTime)
//      default: break
//      }
//    }
//  }
//
//  /// Used by the encoding methods of the SwiftProtobuf library, not generally
//  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
//  /// other serializer methods are defined in the SwiftProtobuf library. See the
//  /// `Message` and `Message+*Additions` files.
//  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
//    if let v = self._id {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._pid {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._uid {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
//    }
//    if let v = self._notifyID {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
//    }
//    if let v = self._targetGroup {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
//    }
//    if let v = self._target {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
//    }
//    if let v = self._targetType {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
//    }
//    if let v = self._read {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
//    }
//    if let v = self._content {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
//    }
//    if let v = self._addTime {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  fileprivate var _id: Int32?
//  fileprivate var _pid: Int32?
//  fileprivate var _uid: Int32?
//  fileprivate var _notifyID: Int32?
//  fileprivate var _targetGroup: Int32?
//  fileprivate var _target: Int32?
//  fileprivate var _targetType: Int32?
//  fileprivate var _read: Bool?
//  fileprivate var _content: String?
//  fileprivate var _addTime: String?
//}
//
//struct ProtosBody_Login: SwiftProtobuf.Message {
//  static let protoMessageName: String = _protobuf_package + ".Login"
//
//  var pid: Int32 {
//    get {return _pid ?? 0}
//    set {_pid = newValue}
//  }
//  /// Returns true if `pid` has been explicitly set.
//  var hasPid: Bool {return self._pid != nil}
//  /// Clears the value of `pid`. Subsequent reads from it will return its default value.
//  mutating func clearPid() {self._pid = nil}
//
//  var uid: Int32 {
//    get {return _uid ?? 0}
//    set {_uid = newValue}
//  }
//  /// Returns true if `uid` has been explicitly set.
//  var hasUid: Bool {return self._uid != nil}
//  /// Clears the value of `uid`. Subsequent reads from it will return its default value.
//  mutating func clearUid() {self._uid = nil}
//
//  var token: String {
//    get {return _token ?? String()}
//    set {_token = newValue}
//  }
//  /// Returns true if `token` has been explicitly set.
//  var hasToken: Bool {return self._token != nil}
//  /// Clears the value of `token`. Subsequent reads from it will return its default value.
//  mutating func clearToken() {self._token = nil}
//
//  var unknownFields = SwiftProtobuf.UnknownStorage()
//
//  init() {}
//
//  public var isInitialized: Bool {
//    if self._pid == nil {return false}
//    if self._uid == nil {return false}
//    if self._token == nil {return false}
//    return true
//  }
//
//  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
//  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
//  /// initializers are defined in the SwiftProtobuf library. See the Message and
//  /// Message+*Additions` files.
//  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._pid)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._uid)
//      case 3: try decoder.decodeSingularStringField(value: &self._token)
//      default: break
//      }
//    }
//  }
//
//  /// Used by the encoding methods of the SwiftProtobuf library, not generally
//  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
//  /// other serializer methods are defined in the SwiftProtobuf library. See the
//  /// `Message` and `Message+*Additions` files.
//  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
//    if let v = self._pid {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._uid {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    if let v = self._token {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  fileprivate var _pid: Int32?
//  fileprivate var _uid: Int32?
//  fileprivate var _token: String?
//}
//
//struct ProtosBody_RESULT: SwiftProtobuf.Message {
//  static let protoMessageName: String = _protobuf_package + ".RESULT"
//
//  var result: Bool {
//    get {return _result ?? false}
//    set {_result = newValue}
//  }
//  /// Returns true if `result` has been explicitly set.
//  var hasResult: Bool {return self._result != nil}
//  /// Clears the value of `result`. Subsequent reads from it will return its default value.
//  mutating func clearResult() {self._result = nil}
//
//  var id: Int32 {
//    get {return _id ?? 0}
//    set {_id = newValue}
//  }
//  /// Returns true if `id` has been explicitly set.
//  var hasID: Bool {return self._id != nil}
//  /// Clears the value of `id`. Subsequent reads from it will return its default value.
//  mutating func clearID() {self._id = nil}
//
//  var unknownFields = SwiftProtobuf.UnknownStorage()
//
//  init() {}
//
//  public var isInitialized: Bool {
//    if self._result == nil {return false}
//    if self._id == nil {return false}
//    return true
//  }
//
//  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
//  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
//  /// initializers are defined in the SwiftProtobuf library. See the Message and
//  /// Message+*Additions` files.
//  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularBoolField(value: &self._result)
//      case 2: try decoder.decodeSingularInt32Field(value: &self._id)
//      default: break
//      }
//    }
//  }
//
//  /// Used by the encoding methods of the SwiftProtobuf library, not generally
//  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
//  /// other serializer methods are defined in the SwiftProtobuf library. See the
//  /// `Message` and `Message+*Additions` files.
//  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
//    if let v = self._result {
//      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
//    }
//    if let v = self._id {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  fileprivate var _result: Bool?
//  fileprivate var _id: Int32?
//}
//
//struct ProtosBody_SConnect: SwiftProtobuf.Message {
//  static let protoMessageName: String = _protobuf_package + ".SConnect"
//
//  var connectKey: String {
//    get {return _connectKey ?? String()}
//    set {_connectKey = newValue}
//  }
//  /// Returns true if `connectKey` has been explicitly set.
//  var hasConnectKey: Bool {return self._connectKey != nil}
//  /// Clears the value of `connectKey`. Subsequent reads from it will return its default value.
//  mutating func clearConnectKey() {self._connectKey = nil}
//
//  var unknownFields = SwiftProtobuf.UnknownStorage()
//
//  init() {}
//
//  public var isInitialized: Bool {
//    if self._connectKey == nil {return false}
//    return true
//  }
//
//  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
//  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
//  /// initializers are defined in the SwiftProtobuf library. See the Message and
//  /// Message+*Additions` files.
//  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._connectKey)
//      default: break
//      }
//    }
//  }
//
//  /// Used by the encoding methods of the SwiftProtobuf library, not generally
//  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
//  /// other serializer methods are defined in the SwiftProtobuf library. See the
//  /// `Message` and `Message+*Additions` files.
//  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
//    if let v = self._connectKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  fileprivate var _connectKey: String?
//}
//
//struct ProtosBody_CReconnection: SwiftProtobuf.Message {
//  static let protoMessageName: String = _protobuf_package + ".CReconnection"
//
//  var oldConnectKey: String {
//    get {return _oldConnectKey ?? String()}
//    set {_oldConnectKey = newValue}
//  }
//  /// Returns true if `oldConnectKey` has been explicitly set.
//  var hasOldConnectKey: Bool {return self._oldConnectKey != nil}
//  /// Clears the value of `oldConnectKey`. Subsequent reads from it will return its default value.
//  mutating func clearOldConnectKey() {self._oldConnectKey = nil}
//
//  var nowConnectKey: String {
//    get {return _nowConnectKey ?? String()}
//    set {_nowConnectKey = newValue}
//  }
//  /// Returns true if `nowConnectKey` has been explicitly set.
//  var hasNowConnectKey: Bool {return self._nowConnectKey != nil}
//  /// Clears the value of `nowConnectKey`. Subsequent reads from it will return its default value.
//  mutating func clearNowConnectKey() {self._nowConnectKey = nil}
//
//  var unknownFields = SwiftProtobuf.UnknownStorage()
//
//  init() {}
//
//  public var isInitialized: Bool {
//    if self._oldConnectKey == nil {return false}
//    if self._nowConnectKey == nil {return false}
//    return true
//  }
//
//  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
//  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
//  /// initializers are defined in the SwiftProtobuf library. See the Message and
//  /// Message+*Additions` files.
//  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularStringField(value: &self._oldConnectKey)
//      case 2: try decoder.decodeSingularStringField(value: &self._nowConnectKey)
//      default: break
//      }
//    }
//  }
//
//  /// Used by the encoding methods of the SwiftProtobuf library, not generally
//  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
//  /// other serializer methods are defined in the SwiftProtobuf library. See the
//  /// `Message` and `Message+*Additions` files.
//  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
//    if let v = self._oldConnectKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
//    }
//    if let v = self._nowConnectKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  fileprivate var _oldConnectKey: String?
//  fileprivate var _nowConnectKey: String?
//}
//
//struct ProtosBody_SReconnection: SwiftProtobuf.Message {
//  static let protoMessageName: String = _protobuf_package + ".SReconnection"
//
//  var type: Int32 {
//    get {return _type ?? 0}
//    set {_type = newValue}
//  }
//  /// Returns true if `type` has been explicitly set.
//  var hasType: Bool {return self._type != nil}
//  /// Clears the value of `type`. Subsequent reads from it will return its default value.
//  mutating func clearType() {self._type = nil}
//
//  var connectKey: String {
//    get {return _connectKey ?? String()}
//    set {_connectKey = newValue}
//  }
//  /// Returns true if `connectKey` has been explicitly set.
//  var hasConnectKey: Bool {return self._connectKey != nil}
//  /// Clears the value of `connectKey`. Subsequent reads from it will return its default value.
//  mutating func clearConnectKey() {self._connectKey = nil}
//
//  var info: String {
//    get {return _info ?? String()}
//    set {_info = newValue}
//  }
//  /// Returns true if `info` has been explicitly set.
//  var hasInfo: Bool {return self._info != nil}
//  /// Clears the value of `info`. Subsequent reads from it will return its default value.
//  mutating func clearInfo() {self._info = nil}
//
//  var unknownFields = SwiftProtobuf.UnknownStorage()
//
//  init() {}
//
//  public var isInitialized: Bool {
//    if self._type == nil {return false}
//    if self._connectKey == nil {return false}
//    if self._info == nil {return false}
//    return true
//  }
//
//  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
//  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
//  /// initializers are defined in the SwiftProtobuf library. See the Message and
//  /// Message+*Additions` files.
//  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
//    while let fieldNumber = try decoder.nextFieldNumber() {
//      switch fieldNumber {
//      case 1: try decoder.decodeSingularInt32Field(value: &self._type)
//      case 2: try decoder.decodeSingularStringField(value: &self._connectKey)
//      case 3: try decoder.decodeSingularStringField(value: &self._info)
//      default: break
//      }
//    }
//  }
//
//  /// Used by the encoding methods of the SwiftProtobuf library, not generally
//  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
//  /// other serializer methods are defined in the SwiftProtobuf library. See the
//  /// `Message` and `Message+*Additions` files.
//  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
//    if let v = self._type {
//      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
//    }
//    if let v = self._connectKey {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
//    }
//    if let v = self._info {
//      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
//    }
//    try unknownFields.traverse(visitor: &visitor)
//  }
//
//  fileprivate var _type: Int32?
//  fileprivate var _connectKey: String?
//  fileprivate var _info: String?
//}
//
//// MARK: - Code below here is support for the SwiftProtobuf runtime.
//
//private let _protobuf_package = "protosBody"
//
//extension ProtosBody_notice_funtion: SwiftProtobuf._ProtoNameProviding {
//  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
//    1: .same(proto: "CREGISTER"),
//    2: .same(proto: "SREGISTER"),
//    3: .same(proto: "SNOTICE"),
//    4: .same(proto: "CNOTICE"),
//    5: .same(proto: "SCANCEL"),
//    6: .same(proto: "CCANCEL")
//  ]
//}
//
//extension ProtosBody_user_notice: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
//  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
//    1: .same(proto: "id"),
//    2: .same(proto: "pid"),
//    3: .same(proto: "uid"),
//    4: .standard(proto: "notify_id"),
//    5: .standard(proto: "target_group"),
//    6: .same(proto: "target"),
//    7: .standard(proto: "target_type"),
//    8: .same(proto: "read"),
//    9: .same(proto: "content"),
//    10: .standard(proto: "add_time")
//  ]
//
//  func _protobuf_generated_isEqualTo(other: ProtosBody_user_notice) -> Bool {
//    if self._id != other._id {return false}
//    if self._pid != other._pid {return false}
//    if self._uid != other._uid {return false}
//    if self._notifyID != other._notifyID {return false}
//    if self._targetGroup != other._targetGroup {return false}
//    if self._target != other._target {return false}
//    if self._targetType != other._targetType {return false}
//    if self._read != other._read {return false}
//    if self._content != other._content {return false}
//    if self._addTime != other._addTime {return false}
//    if unknownFields != other.unknownFields {return false}
//    return true
//  }
//}
//
//extension ProtosBody_Login: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
//  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
//    1: .same(proto: "pid"),
//    2: .same(proto: "uid"),
//    3: .same(proto: "token")
//  ]
//
//  func _protobuf_generated_isEqualTo(other: ProtosBody_Login) -> Bool {
//    if self._pid != other._pid {return false}
//    if self._uid != other._uid {return false}
//    if self._token != other._token {return false}
//    if unknownFields != other.unknownFields {return false}
//    return true
//  }
//}
//
//extension ProtosBody_RESULT: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
//  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
//    1: .same(proto: "result"),
//    2: .same(proto: "id")
//  ]
//
//  func _protobuf_generated_isEqualTo(other: ProtosBody_RESULT) -> Bool {
//    if self._result != other._result {return false}
//    if self._id != other._id {return false}
//    if unknownFields != other.unknownFields {return false}
//    return true
//  }
//}
//
//extension ProtosBody_SConnect: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
//  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
//    1: .standard(proto: "connect_key")
//  ]
//
//  func _protobuf_generated_isEqualTo(other: ProtosBody_SConnect) -> Bool {
//    if self._connectKey != other._connectKey {return false}
//    if unknownFields != other.unknownFields {return false}
//    return true
//  }
//}
//
//extension ProtosBody_CReconnection: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
//  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
//    1: .standard(proto: "old_connect_key"),
//    2: .standard(proto: "now_connect_key")
//  ]
//
//  func _protobuf_generated_isEqualTo(other: ProtosBody_CReconnection) -> Bool {
//    if self._oldConnectKey != other._oldConnectKey {return false}
//    if self._nowConnectKey != other._nowConnectKey {return false}
//    if unknownFields != other.unknownFields {return false}
//    return true
//  }
//}
//
//extension ProtosBody_SReconnection: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
//  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
//    1: .same(proto: "type"),
//    2: .standard(proto: "connect_key"),
//    3: .same(proto: "info")
//  ]
//
//  func _protobuf_generated_isEqualTo(other: ProtosBody_SReconnection) -> Bool {
//    if self._type != other._type {return false}
//    if self._connectKey != other._connectKey {return false}
//    if self._info != other._info {return false}
//    if unknownFields != other.unknownFields {return false}
//    return true
//  }
//}
